<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 1、根节点<configuration>，包含下面三个属性： scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
	scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 3、子节点<property> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。 
		name: 变量的名称 value: 的值时变量定义的值 -->
	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="/home" />
	<!-- 5、子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名 -->
	<!-- 控制台输出 5.1、ConsoleAppender 把日志输出到控制台，有以下子节点： <encoder>：对日志进行格式化。（具体参数稍后讲解 
		） <target>：字符串System.out(默认)或者System.err（区别不多说了） -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -
				%msg%n</pattern>
		</encoder>
	</appender>
	<!-- 按照每天生成日志文件 -->
	<!-- appender可以理解为logback输出的目的地(除了生成文件外，还可以把日志信息输出到数据库,可以网上搜一搜) -->
	<!-- 时间滚动输出 level为 ERROR 日志 -->
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
             <level>ERROR</level>
             <onMatch>ACCEPT</onMatch>
             <onMismatch>DENY</onMismatch>
         </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_HOME}/%d{yyyyMMdd}/demo.error.log.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--日志文件保留天数 -->
			<MaxHistory>30</MaxHistory>
		</rollingPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -
				%msg%n</pattern>
		</encoder>
		<!--日志文件最大的大小 -->
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
	</appender>
	
	<!-- 时间滚动输出 level为 WARN 日志 -->
	<appender name="WARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
             <level>WARN</level>
             <onMatch>ACCEPT</onMatch>
             <onMismatch>DENY</onMismatch>
         </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_HOME}/%d{yyyyMMdd}/demo.warn.log.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--日志文件保留天数 -->
			<MaxHistory>30</MaxHistory>
		</rollingPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -
				%msg%n</pattern>
		</encoder>
		<!--日志文件最大的大小 -->
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
	</appender>
	
	<!-- 生成INFO级别日志 -->
	<!-- <appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
             <level>INFO</level>
             <onMatch>ACCEPT</onMatch>
             <onMismatch>DENY</onMismatch>
         </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			日志文件输出的文件名
			<FileNamePattern>${LOG_HOME}/%d{yyyyMMdd}/demo.info.log.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			日志文件保留天数
			<MaxHistory>30</MaxHistory>
		</rollingPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -
				%msg%n</pattern>
		</encoder>
		
		日志文件最大的大小:实际上这样不起作用的,是TimeBasedRollingPolicy和SizeBasedTriggeringPolicy冲突造成的 
		详见:https://blog.csdn.net/wujianmin577/article/details/68922545
		
		<triggeringPolicy
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
	</appender> -->
	
	<!-- 生成INFO级别日志 -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
             <level>INFO</level>
             <onMatch>ACCEPT</onMatch>
             <onMismatch>DENY</onMismatch>
         </filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_HOME}/%d{yyyyMMdd}/demo.info.log.%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!--日志文件保留天数 -->
			<!-- 单个日志文件最多 2MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>2MB</maxFileSize>    
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -
				%msg%n</pattern>
		</encoder>
	</appender>
	<!-- 将日志存储到oracle数据库中 -->
    <appender name="db-classic-oracle" class="ch.qos.logback.classic.db.DBAppender">  
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">  
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">                 
                <driverClass>oracle.jdbc.driver.OracleDriver</driverClass>  
                <url>jdbc:oracle:thin:@192.168.50.85:1521:orcl</url>  
                <user>xw_ccs</user>  
                <password>xw_ccs</password>
                <sqlDialect class="ch.qos.logback.core.db.dialect.OracleDialect" />   
            </dataSource>  
        </connectionSource> 
    </appender>
	
	<!-- 
	    logger的name属性可以是包名、 类的全限定(路径)名与字符串
	         如果是包名则该包下面的类里面定义的private final static Logger logger = LoggerFactory.getLogger(类名.class);
	    的logger所记录的日志都会输出到对应的appender所定义的目标日志里面
	          类的全限定(路径)名 与 java文件 private final static Logger logger = LoggerFactory.getLogger(类名.class); 对应;
	         字符串 与 java文件private final static Logger logger = LoggerFactory.getLogger(字符串) 对应
	-->
    <logger name="logback.test.LogbackDemo" level="INFO" additivity="false">
       <appender-ref ref="INFO" />
       <appender-ref ref="WARN" />
       <appender-ref ref="ERROR" />
       <appender-ref ref="STDOUT" />
       <appender-ref ref="db-classic-oracle" />
    </logger>
    <!-- 
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
	<logger name="java.sql.Connection" level="DEBUG" />
	<logger name="java.sql.Statement" v="DEBUG" />
	<logger name="com.ibatis" level="DEBUG" />
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" /> 
	-->
	<!-- 日志输出级别:INFO,由于日志级别RACE < DEBUG < INFO < WARN < ERROR,所以最终的日志只会输出INFO及以上级别的日志(还有WARN、ERROR) -->
	<!-- 
	    root节点是根logger的意思，这里定义了根logger的输出就是控制台 和 name属性为 FILE的appender(可生成类似于demo.*.log.2018-08-23.log的
	         日志文件),一般项目里面的root的日志输出级别设为DEBUG,其他logger的日志输出级别设为INFO或DEBUG
	-->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<!-- <appender-ref ref="FILE" /> -->
	</root>
</configuration>
<!-- 5.3、RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点： 

	<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
	
	<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 
	
	<rollingPolicy>:
	                           当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 
	class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点： 
	
	<fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。 
	如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变； 
	如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
	
	<maxHistory>: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。 
	
	class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 
	触发当前活动文件滚动。只有一个节点: 
	                         <maxFileSize>:这是活动文件的大小，默认值是10MB。
	                          <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。 
	
	<triggeringPolicy>: 告知 RollingFileAppender 合适激活滚动。 
	class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy" 
	根据固定窗口算法重命名文件的滚动策略。有以下子节点：
	                                      <minIndex>:窗口索引最小值
	                                      <maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。 
	                                      <fileNamePattern>:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,
	                                      会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，
	参考:
	    Logback的使用和logback.xml详解:https://www.cnblogs.com/warking/p/5710303.html
	    Logback手记（一）:https://blog.csdn.net/collection4u/article/details/7034090
	    Logback浅析:https://www.cnblogs.com/yongze103/archive/2012/05/05/2484753.html
-->
<!-- 

   　3、有效级别及级别的继承
           Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。
　　4、打印方法与基本的选择规则
                           打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info("..")是一条级别为 INFO的记录语句。
                           记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger的有效级别为 q，
                           只有则当 p>=q时，该请求才会被执行。
                          该规则是 logback 的核心。级别排序为： TRACE < DEBUG < INFO < WARN < ERROR

 -->
 <!-- 
     Filter 过滤器:appender节点内部加上filter子节点

    Logback-classic提供两种类型的过滤器：常规过滤器和TuroboFilter过滤器比如ch.qos.logback.classic.filter.LevelFilter。
    Logback整体流程：Logger 产生日志信息；Layout修饰这条msg的显示格式；Filter过滤显示的内容；Appender具体的显示，即保存这日志信息的地方
         我们可以使用过滤器将不同级别的日志生成不同的日志文件分别存储
         
         如果appender节点内部不加上filter子节点,那么所有级别的日志都存储在同一个日志文件里面,区分寻找起来比较麻烦
         
     
  -->
